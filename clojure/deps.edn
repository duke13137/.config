;; --------------------------------------------------
;; Practicalli Clojure CLI Configuration
;;
;; Aliases that extend the features of the Clojure CLI
;; using Community projects as tools and libraries
;; to enhanced the development workflow
;; --------------------------------------------------


;; --------------------------------------------------
;; Top-level keys for Clojure CLI deps.edn

;; `:mvn/repositories` - Maven & Clojars repositories, examples of other repositories
;; `:mvn/local-repo`   - set local repository path - defaults to $HOME/.m2/repository
;; `:aliases`          - tools to enhance a development workflow
;; `:paths`            - directory paths to add to the class path
;; `:deps`             - library dependencies to add to the class path

;; `:paths` and `:deps` are typically used in the project `deps.edn`
;; rather than a user `deps.edn` configuration

;; Keys used within :aliases
;;  resolve-deps aliases affect dependency resolution, options:
;;    `:extra-deps` - specifies extra deps to add to :deps
;;    `:override-deps` - specifies a coordinate to use instead of that in :deps
;;    `:default-deps` - specifies a coordinate to use for a lib if one isn't found
;;  make-classpath aliases affect the classpath generation, options:
;;    `:extra-paths` - vector of additional paths to add to the classpath
;;    `:classpath-overrides` - map of lib to path that overrides the result of resolving deps
;; ---------------------------------------------------


{;; ---------------------------------------------------
 ;; Library Repositories (maven)

 ;; Specify a local repository for maven - default `$HOME/.m2/repository`
 ;; FreeDesktop.org XDG_CACHE_HOME is the recommended location
 ;; Full path should be used, otherwise a relative directory path will be created
 ;; :mvn/local-repo "/home/practicalli/.cache/maven/repository"

 ;; `clojure -Spath` will show the current class path which will include the path to the local maven repository for the library dependencies.

 ;; Order in which repositories are consulted is not guaranteed, so only add essential repositories
 ;; Maven Central and Clojars are the canonical repositories for library dependencies
 ;; JCenter is large and fast mirror often accessible behind corporate firewalls

 :mvn/repos {"central" {:url "https://repo1.maven.org/maven2/"}
             "clojars" {:url "https://repo.clojars.org/"}

             ;; Clojure snapshots
             ;; "sonatype" {:url "https://oss.sonatype.org/content/repositories/snapshots/"}

             ;; Maven Central Google Cloud Storage mirrors
             ;; Americas
             ;; "google-maven-central" {:url "https://maven-central.storage-download.googleapis.com/maven2/"}
             ;; Asia
             ;; "google-maven-central" {:url "https://maven-central-asia.storage-download.googleapis.com/maven2/"}
             ;; Europe
             ;; "google-maven-central" {:url "https://maven-central-eu.storage-download.googleapis.com/maven2/"}

             ;; "clojars-china-mirror" {:url "https://mirrors.tuna.tsinghua.edu.cn/clojars/"}

             ;; Example of local Artifactory repository configuration
             ;; {"business-area" {:url "https://artifacts.internal-server.com:443/artifactory/business-area-maven-local"}

             #_()}

 ;; End of Library Repositories
 ;; ---------------------------------------------------

 ;; ---------------------------------------------------
 ;; User alias definitions

 :aliases
 {
  ;; ---------------------------------------------------
  ;; Development environment

  ;; https://flow-storm.github.io/flow-storm-debugger/user_guide.html#_clojurestorm
  :dbg
  {:classpath-overrides {org.clojure/clojure nil}
   :extra-deps {com.github.flow-storm/clojure        {:mvn/version "RELEASE"}
                com.github.flow-storm/flow-storm-dbg {:mvn/version "RELEASE"}}
   :jvm-opts ["-Dclojure.storm.instrumentEnable=true"
              ;"-Dclojure.storm.instrumentOnlyPrefixes=YOUR_INSTRUMENTATION_STRING"
              "-Dflowstorm.styles=/home/hacker/.clojure/flowstorm-styles.css"]}

  :reload
  {:extra-paths ["dev" "test"]
   :extra-deps  {com.clojure-goes-fast/clj-java-decompiler  {:mvn/version "RELEASE"}
                 com.clojure-goes-fast/clj-async-profiler   {:mvn/version "RELEASE"}
                 com.github.flow-storm/flow-storm-dbg       {:mvn/version "RELEASE"}
                 io.github.matthewdowney/rich-comment-tests {:mvn/version "RELEASE"}
                 criterium/criterium          {:mvn/version "RELEASE"}
                 com.brunobonacci/mulog       {:mvn/version "RELEASE"}
                 io.github.tonsky/clj-reload  {:mvn/version "RELEASE"}
                 lambdaisland/kaocha          {:mvn/version "RELEASE"}
                 org.clj-commons/pretty       {:mvn/version "RELEASE"}
                 org.clojure/test.check       {:mvn/version "RELEASE"}
                 org.clojure/tools.namespace  {:mvn/version "RELEASE"}
                 org.clojure/tools.trace      {:mvn/version "RELEASE"}
                 org.slf4j/slf4j-nop          {:mvn/version "RELEASE"}
                 ring/ring-mock               {:mvn/version "RELEASE"}
                 virgil/virgil                {:mvn/version "RELEASE"}
                 vvvvalvalval/scope-capture   {:mvn/version "RELEASE"}}}

  ;; End of Development environment
  ;; ---------------------------------------------------
  
  ;; ---------------------------------------------------
  ;; Running a REPL

  :repl
  {:extra-deps {djblue/portal                 {:mvn/version "RELEASE"}
                io.github.nextjournal/clerk   {:mvn/version "RELEASE"}
                nrepl/nrepl                   {:mvn/version "RELEASE"}
                cider/cider-nrepl             {:mvn/version "RELEASE"}
                refactor-nrepl/refactor-nrepl {:mvn/version "RELEASE"}}
   :main-opts  ["--eval" "(require '[nextjournal.clerk])(nextjournal.clerk/show! 'nextjournal.clerk.tap)(nextjournal.clerk/serve! {:browse? true})"
                "--main" "nrepl.cmdline"
                "--middleware" "[refactor-nrepl.middleware/wrap-refactor,cider.nrepl/cider-middleware]"
                "--interactive"]}

  ;; ---------------------------------------------------
  ;; Remote REPL connection

  ;; Connect to the nREPL server of a remote REPL
  ;; clojure -M:repl/connect --host hostname --port 12345
  ;; replace --host and --port values with that of remote nREPL server
  :repl/connect
  {:extra-deps {nrepl/nrepl {:mvn/version "RELEASE"}}
   :main-opts ["--main" "nrepl.cmdline" "--connect"]}

  ;; End of REPL and nREPL connections
  ;; ---------------------------------------------------

  ;; ---------------------------------------------------
  ;; Test runners

  ;; Cognitect test-runner
  ;; https://github.com/cognitect-labs/test-runner
  ;; clojure -X:test/cognitect
  :test/cognitect
  {:extra-paths ["test"]
   :extra-deps  {io.github.cognitect-labs/test-runner
                 {:git/tag "v0.5.1" :git/sha "dfb30dd"}}
   :main-opts   ["--main" "cognitect.test-runner"]
   :exec-fn cognitect.test-runner.api/test}

  ;; kaocha - comprehensive test runner for Clojure/Script
  ;; tests.edn should be created for each project
  ;; https://github.com/lambdaisland/kaocha

  ;; Default test runner using kaocha (change to your own preference)
  ;; clojure -X:test/run
  ;; clojure -X:test/run :fail-fast true
  :test/run
  {:extra-paths ["test"]
   :extra-deps {lambdaisland/kaocha {:mvn/version "RELEASE"}}
   :main-opts   ["--main" "kaocha.runner"]
   :exec-fn kaocha.runner/exec-fn
   :exec-args {:randomize? false
               :fail-fast? true}}

  ;; Kaocha test runner in watch mode
  ;; clojure -X:test/watch
  :test/watch
  {:extra-paths ["test"]
   :extra-deps {lambdaisland/kaocha {:mvn/version "RELEASE"}}
   :main-opts   ["--main" "kaocha.runner" "--watch" "--fail-fast" "--skip-meta" ":slow"]
   :exec-fn kaocha.runner/exec-fn
   :exec-args {:watch? true
               :randomize? false
               :fail-fast? true}}

  :test/cljs
  {:extra-paths ["test"]
   :extra-deps  {lambdaisland/kaocha      {:mvn/version "RELEASE"}
                 lambdaisland/kaocha-cljs {:mvn/version "RELEASE"}}
   :main-opts   ["--main" "kaocha.runner" "unit-cljs"]}

  ;; https://github.com/lambdaisland/kaocha-cucumbe
  ;; - used for kaocha-runner.el to run Kaocha test runner in Emacs Cider
  :lib/kaocha
  {:extra-deps {lambdaisland/kaocha {:mvn/version "RELEASE"}}}

  ;; End of Test runners
  ;; ---------------------------------------------------

  ;; ---------------------------------------------------
  ;; Test Coverage tools

  ;; Cloverage - Simple clojure coverage tool
  ;; https://github.com/cloverage/cloverage
  ;; In the root of your Clojure project, run the command:
  ;; clojure -M:test/coverage
  ;; clojure -X:test/coverage
  :test/cloverage
  {:extra-paths ["test"]
   :extra-deps  {cloverage/cloverage {:mvn/version "RELEASE"}}
   :main-opts   ["--main" "cloverage.coverage"
                 "--src-ns-path" "src"
                 "--test-ns-path" "test"]
   :exec-fn     cloverage.coverage/run-project
   :exec-args   {:src-ns-path  ["src"]
                 :test-ns-path ["test"]}}

  ;; End of Test Coverage tools
  ;; ---------------------------------------------------

  ;; A CLI to add common aliases and features to deps.edn-based projects.
  :neil
  {:deps {io.github.babashka/neil {:git/tag "v0.3.65" :git/sha "9a79582"}}}
  :main-opts ["-m" "babashka.neil"]}}

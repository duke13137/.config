;; --------------------------------------------------
;; Practicalli Clojure CLI Configuration
;;
;; Aliases that extend the features of the Clojure CLI
;; using Community projects as tools and libraries
;; to enhanced the development workflow
;; --------------------------------------------------


;; --------------------------------------------------
;; Top-level keys for Clojure CLI deps.edn

;; `:mvn/repositories` - Maven & Clojars repositories, examples of other repositories
;; `:mvn/local-repo`   - set local repository path - defaults to $HOME/.m2/repository
;; `:aliases`          - tools to enhance a development workflow
;; `:paths`            - directory paths to add to the class path
;; `:deps`             - library dependencies to add to the class path

;; `:paths` and `:deps` are typically used in the project `deps.edn`
;; rather than a user `deps.edn` configuration

;; Keys used within :aliases
;;  resolve-deps aliases affect dependency resolution, options:
;;    `:extra-deps` - specifies extra deps to add to :deps
;;    `:override-deps` - specifies a coordinate to use instead of that in :deps
;;    `:default-deps` - specifies a coordinate to use for a lib if one isn't found
;;  make-classpath aliases affect the classpath generation, options:
;;    `:extra-paths` - vector of additional paths to add to the classpath
;;    `:classpath-overrides` - map of lib to path that overrides the result of resolving deps
;; ---------------------------------------------------


{;; ---------------------------------------------------
 ;; Library Repositories (maven)

 ;; Specify a local repository for maven - default `$HOME/.m2/repository`
 ;; FreeDesktop.org XDG_CACHE_HOME is the recommended location
 ;; Full path should be used, otherwise a relative directory path will be created
 ;; :mvn/local-repo "/Users/duke/.m2/repository"

 ;; `clojure -Spath` will show the current class path which will include the path to the local maven repository for the library dependencies.

 ;; Order in which repositories are consulted is not guaranteed, so only add essential repositories
 ;; Maven Central and Clojars are the canonical repositories for library dependencies
 ;; JCenter is large and fast mirror often accessible behind corporate firewalls

 :mvn/repos {"central" {:url "https://repo1.maven.org/maven2/"}
             "clojars" {:url "https://repo.clojars.org/"}

             ;; Clojure snapshots
             "sonatype" {:url "https://oss.sonatype.org/content/repositories/snapshots/"}

             ;; Maven Central Google Cloud Storage mirrors
             ;; Americas
             ;; "google-maven-central" {:url "https://maven-central.storage-download.googleapis.com/maven2/"}
             ;; Asia
             ;; "google-maven-central" {:url "https://maven-central-asia.storage-download.googleapis.com/maven2/"}
             ;; Europe
             ;; "google-maven-central" {:url "https://maven-central-eu.storage-download.googleapis.com/maven2/"}

             ;; "clojars-china-mirror" {:url "https://mirrors.tuna.tsinghua.edu.cn/clojars/"}

             ;; Example of local Artifactory repository configuration
             ;; {"business-area" {:url "https://artifacts.internal-server.com:443/artifactory/business-area-maven-local"}

             #_()}

 ;; End of Library Repositories
 ;; ---------------------------------------------------

 ;; ---------------------------------------------------
 ;; User alias definitions

 :aliases
 {:lib/lang
  {:extra-deps {com.aphyr/bifurcan-clj  {:mvn/version "RELEASE"}
                com.cnuernber/charred   {:mvn/version "RELEASE"}
                com.rpl/specter         {:mvn/version "RELEASE"}
                datalevin/datalevin     {:mvn/version "RELEASE"}
                dom-top/dom-top         {:mvn/version "RELEASE"}
                funcool/promesa         {:mvn/version "RELEASE"}
                functionalbytes/redelay       {:mvn/version "RELEASE"}
                io.github.tonsky/clojure-plus {:mvn/version "RELEASE"}}}

  :lib/logging
  {:extra-deps {com.taoensso/telemere  {:mvn/version "RELEASE"}
                com.taoensso/trove     {:mvn/version "RELEASE"}
                com.taoensso/tufte     {:mvn/version "RELEASE"}
                com.taoensso/truss     {:mvn/version "RELEASE"}}}

  :lib/aws
  {:extra-deps {com.cognitect.aws/api       {:mvn/version "RELEASE"}
                com.cognitect.aws/endpoints {:mvn/version "RELEASE"}
                com.cognitect.aws/s3        {:mvn/version "RELEASE"}}}

  ;; ---------------------------------------------------
  ;; clj -M:new app|lib|pom|scratch|template --name namespace/core --target-dir proj
  :new {:deps {org.babashka/cli {:mvn/version "RELEASE"}
               io.github.seancorfield/deps-new {:git/tag "v0.10.1"
                                                :git/sha "a90029c"}}
        :ns-default org.corfield.new
        :exec-args {} ;; insert default arguments here
        :main-opts ["-m" "babashka.cli.exec"]}

  ;; https://github.com/tonsky/uberdeps
  :uberjar
  {:replace-deps {uberdeps/uberdeps  {:mvn/version "RELEASE"}}
   :replace-paths []
   :main-opts ["-m" "uberdeps.uberjar"]}

  ;; ---------------------------------------------------
  ;; Development environment

  :dev
  {:extra-paths ["dev"]
   :extra-deps  {com.fulcrologic/guardrails    {:mvn/version "RELEASE"}
                 io.github.tonsky/clj-reload   {:mvn/version "RELEASE"}
                 io.github.noahtheduke/lazytest {:mvn/version "RELEASE"}
                 org.clojure/test.check        {:mvn/version "RELEASE"}
                 org.clj-commons/pretty        {:mvn/version "RELEASE"}
                 org.slf4j/slf4j-nop           {:mvn/version "RELEASE"}
                 virgil/virgil                 {:mvn/version "RELEASE"}
                 org.junit.jupiter/junit-jupiter {:mvn/version "RELEASE"}
                 org.junit.platform/junit-platform-console {:mvn/version "RELEASE"}}}

  :flow
  {:classpath-overrides {org.clojure/clojure nil}
   :extra-deps {com.github.flow-storm/clojure        {:mvn/version "1.12.0-2"}
                com.github.flow-storm/flow-storm-dbg {:mvn/version "RELEASE"}}
   :jvm-opts ["-Dflowstorm.startRecording=false"
              "-Dflowstorm.styles=/tmp/flowstorm.css"
              "-Dflowstorm.theme=dark"
              "-Dclojure.storm.instrumentEnable=true"
              "-Dclojure.storm.instrumentAutoPrefixes=true"]}

  :mcp
  {:deps {org.slf4j/slf4j-nop     {:mvn/version "2.0.16"}
          com.bhauman/clojure-mcp {:local/root "/Users/duke/github/clojure-mcp"}}
   :exec-fn clojure-mcp.main/start-mcp-server
   :exec-args {:port 9999}}

  ;; End of Development environment
  ;; ---------------------------------------------------

  ;; ---------------------------------------------------
  ;; Running a REPL

  :repl
  {:extra-deps {cider/cider-nrepl          {:mvn/version "RELEASE"}
                nrepl/nrepl                {:mvn/version "RELEASE"}
                djblue/portal              {:mvn/version "RELEASE"}
                com.github.gnl/playback    {:mvn/version "RELEASE"}
                vvvvalvalval/scope-capture {:mvn/version "RELEASE"}}
   :jvm-opts   ["-Xmx2g" "-Djdk.attach.allowAttachSelf"]
   :main-opts  ["--main" "nrepl.cmdline"
                "--port" "9999"
                "--middleware" "[cider.nrepl/cider-middleware]"
                "--interactive"]}

  ;; ---------------------------------------------------
  ;; Remote REPL connection

  ;; Connect to the nREPL server of a remote REPL
  ;; clojure -M:repl/connect --host hostname --port 12345
  ;; replace --host and --port values with that of remote nREPL server
  :repl/connect
  {:extra-deps {nrepl/nrepl {:mvn/version "RELEASE"}}
   :main-opts ["--main" "nrepl.cmdline" "--connect"]}

  ;; ---------------------------------------------------
  ;; Socket REPL

  ;; Clojure Socket REPL on port 55555:
  ;; clojure -X:repl/socket
  :repl/socket
  {:exec-fn clojure.core.server/start-server
   :exec-args {:name "socket-repl-server"
               :port 55555
               :accept clojure.core.server/repl
               :server-daemon false}}

  ;; tubular - socket repl client
  ;; https://github.com/mfikes/tubular
  ;; Connect to a socket repl, e.g. :repl/socket
  ;; clojure -M:repl/socket-client
  :repl/socket-client
  {:extra-deps {tubular/tubular {:mvn/version "RELEASE"}}
   :main-opts  ["--main" "tubular.core"
                "-p" "55555"]}

  ;; End of REPL and nREPL connections
  ;; ---------------------------------------------------

  ;; ---------------------------------------------------
  ;; Test runners

  ;; https://github.com/NoahTheDuke/lazytest
  ;; clojure -M:test --watch [options] [path...]
  :test
  {:extra-deps {io.github.noahtheduke/lazytest {:mvn/version "RELEASE"}}
   :extra-paths ["test"]
   :main-opts ["-m" "lazytest.main"]}

  ;; kaocha - comprehensive test runner for Clojure/Script
  ;; tests.edn should be created for each project
  ;; https://github.com/lambdaisland/kaocha

  ;; Default test runner using kaocha (change to your own preference)
  ;; clojure -X:test/run
  ;; clojure -X:test/run :fail-fast true
  :test/run
  {:extra-paths ["test"]
   :extra-deps {lambdaisland/kaocha {:mvn/version "RELEASE"}}
   :main-opts   ["--main" "kaocha.runner"]
   :exec-fn kaocha.runner/exec-fn
   :exec-args {:randomize? false
               :fail-fast? true}}

  ;; Kaocha test runner in watch mode
  ;; clojure -X:test/watch
  :test/watch
  {:extra-paths ["test"]
   :extra-deps {lambdaisland/kaocha {:mvn/version "RELEASE"}}
   :main-opts   ["--main" "kaocha.runner" "--watch" "--fail-fast" "--skip-meta" ":slow"]
   :exec-fn kaocha.runner/exec-fn
   :exec-args {:watch? true
               :randomize? false
               :fail-fast? true}}

  :test/cljs
  {:extra-paths ["test"]
   :extra-deps  {lambdaisland/kaocha      {:mvn/version "RELEASE"}
                 lambdaisland/kaocha-cljs {:mvn/version "RELEASE"}}
   :main-opts   ["--main" "kaocha.runner" "unit-cljs"]}

  ;; End of Test runners
  ;; ---------------------------------------------------

  ;; ---------------------------------------------------
  ;; Test Coverage tools

  ;; Cloverage - Simple clojure coverage tool
  ;; https://github.com/cloverage/cloverage
  ;; In the root of your Clojure project, run the command:
  ;; clojure -M:test/coverage
  ;; clojure -X:test/coverage
  :test/cloverage
  {:extra-paths ["test"]
   :extra-deps  {cloverage/cloverage {:mvn/version "RELEASE"}}
   :main-opts   ["--main" "cloverage.coverage"
                 "--src-ns-path" "src"
                 "--test-ns-path" "test"]
   :exec-fn     cloverage.coverage/run-project
   :exec-args   {:src-ns-path  ["src"]
                 :test-ns-path ["test"]}}

  ;; End of Test Coverage tools
  ;; ---------------------------------------------------

  ;; ---------------------------------------------------
  ;; Libraries

  ;; - report project dependencies that have newer versions available:
  ;; cd project-directory && clojure -T:deps/outdated
  ;; - update library versions in this deps.edn file:
  ;; cd $XDG_CONFIG_HOME/clojure && clojure -T:deps/outdated
  :deps/outdated
  {:replace-paths ["."]
   :replace-deps  {com.github.liquidz/antq {:mvn/version "RELEASE"}
                   org.slf4j/slf4j-nop     {:mvn/version "RELEASE"}}
   :exec-fn antq.tool/outdated
   :exec-args {:directory ["."] ; default
               :exclude ["org.clojure/tools.deps.alpha"
                         "org.clojure/clojurescript"]
               ;; :focus ["com.github.liquidz/antq"]
               :skip ["boot" "leiningen"]
               :reporter "table" ; json edn format
               :verbose false
               :upgrade false
               :force   false}}

  ;; GraphViz of project dependencies
  ;; https://github.com/clojure/tools.deps.graph
  ;; clojure -T:deps/graph
  :deps/graph
  {:replace-paths []
   :replace-deps  {org.clojure/tools.deps.graph {:mvn/version "RELEASE"}}
   :ns-default    clojure.tools.deps.graph
   :exec-fn       graph
   :exec-args     {:output "project-dependencies-graph.png"
                   :size   true}}}}

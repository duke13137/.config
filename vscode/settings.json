{
    "editor.fontFamily": "'FiraCode Nerd Font Mono', Menlo, Monaco",
    "editor.fontLigatures": true,
    "editor.fontSize": 15,
    "debug.console.fontSize": 15,
    "terminal.integrated.fontSize": 15,
    "chat.editor.fontSize": 13,
    "editor.acceptSuggestionOnEnter": "off",
    "editor.formatOnSave": true,
    "editor.minimap.autohide": true,
    "editor.scrollBeyondLastLine": false,
    "editor.tabCompletion": "on",
    "diffEditor.wordWrap": "off",
    "debug.internalConsoleOptions": "openOnSessionStart",
    "debug.openDebug": "openOnDebugBreak",
    "files.eol": "\n",
    "files.exclude": {
        "**/.calva": true,
        "**/.classpath": true,
        "**/.clj-kondo": true,
        "**/.cpcache": true,
        "**/.factorypath": true,
        "**/.lsp": true,
        "**/.project": true,
        "**/.settings": true
    },
    "search.exclude": {
        "**/.clj-kondo": true,
        "**/.cpcache": true,
        "**/.hie": true,
        "**/.stack-work": true,
        "**/*.class": true
    },
    "terminal.integrated.enableMultiLinePasteWarning": "never",
    "terminal.integrated.macOptionIsMeta": true,
    "terminal.integrated.sendKeybindingsToShell": true,
    "terminal.integrated.fontWeightBold": 600,
    "terminal.integrated.fontWeight": 400,
    "terminal.integrated.fontFamily": "'JetBrainsMono Nerd Font Mono'",
    "workbench.activityBar.location": "top",
    "workbench.colorTheme": "Night Owl (No Italics)",
    "workbench.iconTheme": "material-icon-theme",
    "calva.autoEvaluateCode": {
        "onConnect": {
            "clj": "(do (in-ns 'user) (defn read-spy [form] (require 'sc.api) `(sc.api/spy ~form)) (defn read-letsc [form] `(sc.api/letsc ~((requiring-resolve 'sc.api/last-ep-id)) ~form)) (set! *data-readers* (assoc *data-readers* 'sc/letsc #'read-letsc 'sc/spy #'read-spy)))",
            "cljs": ""
        },
        "onFileLoaded": {
            "clj": "(require 'sc.api)",
            "cljs": ""
        }
    },
    "calva.customREPLCommandSnippets": [
        {
            "name": "eval letsc",
            "key": "e",
            "snippet": "#sc/letsc $current-form"
        },
        {
            "name": "tap ep-info",
            "key": "i",
            "snippet": "(tap> (sc.api/ep-info))"
        },
        {
            "name": "def locals",
            "key": "l",
            "snippet": "(eval `(sc.api/defsc ~(sc.api/last-ep-id)))"
        },
        {
            "name": "undef locals",
            "key": "u",
            "snippet": "(eval `(sc.api/undefsc ~(sc.api/last-ep-id)))"
        },
        {
            "name": "Print stacktrace",
            "repl": "clj",
            "snippet": "((requiring-resolve 'clj-commons.pretty.repl/pretty-pst))"
        },
        {
            "name": "Reload namespace",
            "repl": "clj",
            "snippet": "((requiring-resolve 'clj-reload.core/reload))"
        },
        {
            "name": "Decompile current top level form",
            "key": "d",
            "snippet": "(require '[clj-java-decompiler.core :refer [decompile]]) (spit \"decompiled-$top-level-defined-symbol.java\" (with-out-str (decompile $top-level-form)))"
        },
        {
            "name": "Decompile current form",
            "snippet": "(require '[clj-java-decompiler.core :refer [decompile]]) (spit \"decompiled.java\" (with-out-str (decompile $current-form)))"
        },
        {
            "name": "Disassemble current top level form",
            "key": "b",
            "snippet": "(require '[clj-java-decompiler.core :refer [disassemble]]) (spit \"bytecode-$top-level-defined-symbol.class\" (with-out-str (disassemble $top-level-form)))"
        },
        {
            "name": "Disassemble current current form",
            "snippet": "(require '[clj-java-decompiler.core :refer [disassemble]]) (spit \"bytecode.class\" (with-out-str (disassemble $current-form)))"
        }
    ],
    "calva.prettyPrintingOptions": {
        "printEngine": "calva",
        "enabled": false,
        "width": 120,
        "maxLength": 50
    },
    "[clojure]": {
        "diffEditor.ignoreTrimWhitespace": false,
        "editor.wordSeparators": "\t ()\"':,;~@#$%^&{}[]`",
        "editor.autoClosingBrackets": "always",
        "editor.autoClosingOvertype": "always",
        "editor.autoClosingQuotes": "always",
        "editor.formatOnType": true,
        "editor.autoIndent": "full",
        "editor.formatOnPaste": true,
        "editor.matchBrackets": "never",
        "editor.guides.indentation": false,
        "editor.parameterHints.enabled": true,
        "editor.unicodeHighlight.allowedCharacters": {
            " ": true,
            "꞉": true
        },
        "editor.foldingStrategy": "indentation"
    },
    "clangd.path": "/Users/duke/Library/Application Support/Code/User/globalStorage/llvm-vs-code-extensions.vscode-clangd/install/18.1.3/clangd_18.1.3/bin/clangd",
    "continue.enableTabAutocomplete": true,
    "continue.showInlineTip": false,
    "continue.telemetryEnabled": false,
    "git.openRepositoryInParentFolders": "never",
    "github.copilot.editor.enableAutoCompletions": false,
    "github.copilot.enable": {
        "*": false,
        "plaintext": false,
        "markdown": false,
        "scminput": false
    },
    "haskell.manageHLS": "PATH",
    "jdk.test.editor.enableShortcuts": true,
    "launch": {
        "configurations": [
            {
                "type": "lldb",
                "request": "launch",
                "name": "Debug opened file",
                "cwd": "${workspaceFolder}",
                "program": "${fileDirname}/${fileBasenameNoExtension}",
                "args": []
            }
        ]
    },
    "extensions.ignoreRecommendations": true,
    "extensions.experimental.affinity": {
        "asvetliakov.vscode-neovim": 1,
        "vscodevim.vim": 1
    },
    "vim.sneak": true,
    "vim.useCtrlKeys": false,
    "vscode-neovim.autoGeneratedDocumentSchemes": [
        "output",
        "output.calva-repl",
        "vscode-chat-code-block",
        "vscode-copilot-chat-code-block"
    ]
}
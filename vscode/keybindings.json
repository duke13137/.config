// Place your key bindings in this file to overwrite the defaults
[
    {
        "key": "cmd+/",
        "command": "workbench.action.terminal.focus",
        "when": "!terminalFocus"
    },
    {
        "key": "cmd+/",
        "command": "workbench.action.focusActiveEditorGroup",
        "when": "terminalFocus"
    },
    {
        "key": "cmd-m",
        "command": "workbench.action.toggleMaximizedPanel"
    },
    {
        "key": "alt+enter",
        "command": "workbench.action.terminal.runSelectedText",
        "when": "editorTextFocus && editorHasSelection && editorLangId != 'clojure'"
    },
    {
        "key": "shift+alt+'",
        "command": "paredit.rewrapQuote",
        "when": "editorTextFocus && !editorReadOnly && editorLangId =~ /clojure|racket|scheme|lisp/ && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "shift+alt+9",
        "command": "paredit.rewrapParens",
        "when": "editorTextFocus && !editorReadOnly && editorLangId =~ /clojure|racket|scheme|lisp/ && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "alt+[",
        "command": "paredit.rewrapSquare",
        "when": "editorTextFocus && !editorReadOnly && editorLangId =~ /clojure|racket|scheme|lisp/ && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "shift+alt+[",
        "command": "paredit.rewrapCurly",
        "when": "editorTextFocus && !editorReadOnly && editorLangId =~ /clojure|racket|scheme|lisp/ && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "shift+9",
        "command": "paredit.wrapAroundParens",
        "when": "editorHasSelection && editorTextFocus && !editorReadOnly && editorLangId =~ /clojure|racket|scheme|lisp/ && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "[",
        "command": "paredit.wrapAroundSquare",
        "when": "editorHasSelection && editorTextFocus && !editorReadOnly && editorLangId =~ /clojure|racket|scheme|lisp/ && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "shift+[",
        "command": "paredit.wrapAroundCurly",
        "when": "editorHasSelection && editorTextFocus && !editorReadOnly && editorLangId =~ /clojure|racket|scheme|lisp/ && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "shift+alt+h",
        "command": "paredit.slurpSexpBackward",
        "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "shift+alt+j",
        "command": "paredit.barfSexpBackward",
        "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "shift+alt+k",
        "command": "paredit.barfSexpForward",
        "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "shift+alt+l",
        "command": "paredit.slurpSexpForward",
        "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "shift+alt+s",
        "command": "paredit.raiseSexp",
        "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "shift+escape",
        "command": "calva.clearInlineResults",
        "when": "calva:keybindingsEnabled && editorTextFocus && !editorHasMultipleSelections && !editorHasSelection && !editorReadOnly && !hasOtherSuggestions && !parameterHintsVisible && !selectionAnchorSet && !suggestWidgetVisible && editorLangId == 'clojure'"
    },
    {
        "key": "escape",
        "command": "-calva.clearInlineResults",
    },
    {
        "key": "shift+alt+up",
        "command": "editor.action.copyLinesUpAction",
        "when": "!calva:keybindingsEnabled && editorTextFocus && !editorReadonly"
    },
    {
        "key": "shift+alt+down",
        "command": "editor.action.copyLinesDownAction",
        "when": "!calva:keybindingsEnabled && editorTextFocus && !editorReadonly"
    },
    {
        "key": "ctrl+b",
        "command": "-markdown.extension.editing.toggleBold",
        "when": "editorTextFocus && !editorReadonly && editorLangId =~ /^markdown$|^rmd$|^quarto$/"
    },
    {
        "key": "ctrl+shift+a",
        "command": "-notification.acceptPrimaryAction",
        "when": "notificationFocus || notificationToastsVisible"
    },
    {
        "key": "ctrl+w",
        "command": "-workbench.action.closeGroup",
        "when": "activeEditorGroupEmpty && multipleEditorGroups"
    },
    {
        "key": "ctrl+w",
        "command": "-workbench.action.closeActiveEditor"
    },
    {
        "key": "ctrl+w shift+-",
        "command": "workbench.action.increaseViewHeight",
        "when": "!editorTextFocus && !isAuxiliaryWindowFocusedContext && !terminalFocus && neovim.mode != 'cmdline'"
    },
    {
        "key": "ctrl+w ]",
        "command": "workbench.action.increaseViewWidth",
        "when": "!editorTextFocus && !isAuxiliaryWindowFocusedContext && !terminalFocus && neovim.mode != 'cmdline'"
    },
    {
        "key": "ctrl+w [",
        "command": "workbench.action.decreaseViewWidth",
        "when": "!editorTextFocus && !isAuxiliaryWindowFocusedContext && !terminalFocus && neovim.mode != 'cmdline'"
    },
    {
        "key": "cmd+l",
        "command": "-expandLineSelection",
        "when": "textInputFocus"
    },
    {
        "key": "cmd+right",
        "command": "editor.action.inlineSuggest.acceptNextLine"
    },
    {
        "key": "alt+cmd+k",
        "command": "editor.action.insertCursorAbove",
        "when": "editorTextFocus"
    },
    {
        "key": "alt+cmd+j",
        "command": "editor.action.insertCursorBelow",
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+alt+[",
        "command": "vscode-neovim.restart"
    },
    {
        "key": "ctrl+alt+\\",
        "command": "workbench.action.restartExtensionHost"
    }
]